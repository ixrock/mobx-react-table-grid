
.table {
  --grid-col-size: minmax(min-content, 1fr); /* default "auto"-size for all columns */
  --grid-cols: 12; /* grid columns size, defined in <Table> */
  --grid-row-size: 40px; /* fixed row height, defined in <Table> */
  --grid-virtual-max-height: 100%; /* max-scroll height, defined in <Table> */
  --grid-row-highlight-bgc: #000000aa;
  --grid-row-selected-bgc: #3d90ce;
  --grid-row-selected-color: white;
  --grid-header-bgc: rgba(0, 0, 0, .75);
  --grid-thead-bgc: rgba(255, 255, 255, .9);
  --grid-spacing: 8px;
  --grid-resizer-width: 20px;
  --grid-resizing-color: rgba(255, 255, 255, .25);
  --grid-drag-icon-size: 20px;

  position: relative;
  display: grid;
  grid-template-columns: var(--grid-cols) !important;
  grid-auto-rows: var(--grid-row-size) !important;
  grid-template-rows: auto auto !important; /* header, thead*/
  grid-auto-flow: row dense;
  flex: 1;
  width: 100%;
  align-content: start;
  justify-items: stretch;
  overflow: auto;
  overflow: overlay;
  contain: strict;
}

/* max possible scroll-height calculated by rows virtualizer */
.table::before {
  height: var(--grid-virtual-max-height);
  position: absolute;
  width: 1px;
  left: 0;
  top: 0;
  content: "";
}

.header {
  width: inherit;
  height: min-content;
  grid-column: 1 / -1; /* merge contents for all columns within a row */
  text-align: center;
  background: var(--grid-header-bgc);
  z-index: 1;

  > .column {
    justify-content: center;
  }
}

.row {
  &:not(.header) {
    display: contents; /*ignore element in the DOM layout and use it's children in parent css-grid*/
    transition: background-color ease-in-out .35s;
    gap: inherit;

    &:not(.thead):not(.selectedRow):hover > .column {
      background: var(--grid-row-highlight-bgc);
    }
  }
}

.column {
  display: flex;
  align-items: center;
  white-space: nowrap;
  overflow: hidden;
  padding: var(--grid-spacing);
  grid-row: inherit !important;
}

.thead {
  position: sticky;
  top: 0; /* offset from top when parent element is scrolled */
  z-index: 1;
  color: #000;
  height: min-content;
  background: var(--grid-thead-bgc);

  .title {
    flex: 1 0;
  }

  .column {
    position: inherit;
    top: inherit;
    display: flex;
    overflow: visible;
    user-select: none;
    transition: opacity ease-out 250ms;
    place-items: center;
    background: inherit;
    z-index: inherit;

    &:not(.isDraggable) {
      /* re-ordering column (d&d) is disabled */
      cursor: default;
    }

    &:hover {
      .resizeIcon {
        visibility: visible;
      }
    }
  }

  &:empty {
    display: none !important;
  }
}

.sortingArrow {
}

.arrowUp {
  margin: auto 3px;
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 0 5px 8.7px 5px;
  border-color: transparent transparent currentColor transparent;
}

.arrowDown {
  margin: auto 3px;
  width: 0;
  height: 0;
  border-style: solid;
  border-width: 8.7px 5px 0 5px;
  border-color: currentColor transparent transparent transparent;
}

/* multi ordering/sorting data in columns (asc/desc) */
.isSortable {
  cursor: pointer;
  transition: background-color .5s ease-out;
}

/* re-ordering columns with d&d allowed */
.isDraggable {
  cursor: grab;
}

.isDragging {
  opacity: .15;
  pointer-events: none;
}

.isDroppable {
  opacity: .75;
  animation-name: bounce;
  animation-duration: 1s;
  animation-play-state: paused;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}

.isDropReady {
  opacity: 1;
  animation-play-state: running;
}

/* selecting rows (e.g. on click) */
.isSelectable {
  cursor: pointer;
}

.selectedRow {
  color: var(--grid-row-selected-color);
  background-color: var(--grid-row-selected-bgc);

  .column {
    color: inherit;
    background-color: inherit;
  }
}

svg.resizeIcon {
  position: absolute;
  right: 10px;
  flex-shrink: 0;
  cursor: col-resize;
  opacity: .5;
  visibility: hidden;
  width: var(--grid-drag-icon-size);
  height: var(--grid-drag-icon-size);
}

@keyframes bounce {
  0% {
    transform: translateY(0);
  }
  10% {
    transform: translateY(0);
  }
  30% {
    transform: translateY(-10px);
  }
  50% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(0);
  }
}